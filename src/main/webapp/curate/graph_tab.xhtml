<?xml version="1.0" encoding="UTF-8"?>
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:p="http://primefaces.org/ui"
                xmlns:ot="http://myfaces.apache.org/orchestra">

    <h2>Network visualisation</h2>

    <link rel="stylesheet" type="text/css" href="#{facesContext.externalContext.request.contextPath}/resources/css/complexviewer.css"></link>
    <h:outputScript library="javascript" name="d3.js"/>
    <h:outputScript library="javascript" name="complexviewer.js"/>

    <h:panelGroup>
        <div id="messageContainer"/>
        <div id="networkGroup">
            <div id="controls">
                <p:commandButton value="Auto layout" onclick="cv.autoLayout()" type="button"/>
                <p:commandButton value="Expand All" onclick="cv.expandAll()" type="button"/>
                <p:commandButton value="Collapse All" onclick="cv.collapseAll()" type="button"/>
                <p:commandButton value="Export SVG" onclick="exportSVG()" type="button"/>
            </div>
            <div>
                <div id="checkboxes" class="legend">
                    <input type="checkbox" id="mifeatures" name="mifeatures" value="MI Features"
                           autocomplete="off"
                           onchange="setAnnotations(this)"
                           checked="checked"/>
                    <label for="mifeatures"> MI Features</label>
                    <input type="checkbox" id="uniprotkb" name="uniprotkb" value="UniprotKB"
                           autocomplete="off"
                           onchange="setAnnotations(this)"/>
                    <label for="uniprotkb"> UniprotKB Domains</label>
                    <input type="checkbox" id="superfamily" name="superfamily" value="Superfamily"
                           autocomplete="off"
                           onchange="setAnnotations(this)"/>
                    <label for="superfamily"> Superfamily</label>
                    <input type="checkbox" id="interactor" name="interactor" value="Interactor"
                           autocomplete="off"
                           onchange="setAnnotations(this)"
                           checked="checked"/>
                    <label for="interactor"> Interactor</label>
                </div>
            </div>
            <div id="mainNetworkContainer" class="innerMiddleDiv">
                <div class="networkContainerDiv">
                    <div id="networkContainer"></div>
                </div>
                <div id="legendContainer" class="legend">
                    <h3>Legend</h3>
                    <table>
                        <tr>
                            <td>
                                <h:graphicImage url="/resources/images/complexviewer/molecule-set.svg"/>
                            </td>
                            <td>Molecule Set</td>
                        </tr>
                        <tr>
                            <td>
                                <h:graphicImage url="/resources/images/complexviewer/small-molecule.svg"/>
                            </td>
                            <td>Bioactive Entity</td>
                        </tr>
                        <tr>
                            <td>
                                <h:graphicImage url="/resources/images/complexviewer/gene.svg"/>
                            </td>
                            <td>Gene</td>
                        </tr>
                        <tr>
                            <td>
                                <h:graphicImage url="/resources/images/complexviewer/dna.svg"/>
                            </td>
                            <td>DNA</td>
                        </tr>
                        <tr>
                            <td>
                                <h:graphicImage url="/resources/images/complexviewer/rna.svg"/>
                            </td>
                            <td>RNA</td>
                        </tr>
                        <tr>
                            <td>
                                <h:graphicImage url="/resources/images/complexviewer/protein-circle.svg"/>
                                <h:graphicImage url="/resources/images/complexviewer/protein-bar.svg"/>
                            </td>
                            <td>Protein <br/> (click to toggle)</td>
                        </tr>
                    </table>
                </div>
                <div id="componentsContainer" class="legend">
                    <h3>Components / Participants</h3>
                    <div id="colors"></div>
                </div>
            </div>
        </div>
        <script type="text/javascript">
            //<![CDATA[

            const ac = "#{ac}";
            const svgName = "#{svgName}";
            const objType = "#{objType}";

            const exportUrl = "#{facesContext.externalContext.requestContextPath}/service/export/mi/" + objType + "?ac=" + ac + "&format=json";

            const networkContainerDiv = document.getElementById("networkContainer");
            cv = new complexviewer.App(networkContainerDiv);

            loadData();

            function setAnnotations(checkbox) {
                const json = cv.showAnnotations(checkbox.value, checkbox.checked);
                makeLegend(json);
            }

            // you can use code below as template to make legend from json
            function makeLegend(json) {
                const div = document.getElementById("colors");
                div.textContent = "";
                const colorTable = document.createElement("table");
                for (let majorClass in json) {
                    const tr = colorTable.insertRow();
                    const headerCell = tr.insertCell();
                    if (majorClass === "Complex") {
                        headerCell.textContent = "Complex / Interaction";
                    } else {
                        headerCell.textContent = majorClass;
                    }
                    headerCell.colSpan = 3;
                    for (let legendEntry of json[majorClass]) {
                        const tr = colorTable.insertRow();
                        if (legendEntry.certain && legendEntry.uncertain) {
                            const tc1 = tr.insertCell();
                            tc1.style.backgroundColor = legendEntry.certain.color;
                            tc1.style.width = "45px";
                            const tc2 = tr.insertCell();
                            const color = legendEntry.uncertain.color
                            tc2.style.background = "repeating-linear-gradient(45deg, #ffffff, #ffffff 6px, "+color+" 6px, "+color+" 12px)";
                            tc2.style.width = "45px";
                        }
                        else if (legendEntry.certain) {
                            const tc1 = tr.insertCell();
                            tc1.style.backgroundColor = legendEntry.certain.color;
                            tc1.style.width = "90px";
                            tc1.colSpan = 2;
                        }
                        else if (legendEntry.uncertain) {
                            const tc1 = tr.insertCell();
                            const color = legendEntry.uncertain.color
                            tc1.style.background = "repeating-linear-gradient(45deg, #ffffff, #ffffff 6px, "+color+" 6px, "+color+" 12px)";
                            tc1.style.width = "90px";
                            tc1.colSpan = 2;
                        }
                        const tc3 = tr.insertCell();
                        tc3.style.paddingLeft = "10px";
                        if (majorClass === "Complex") {
                            tc3.textContent = legendEntry.name.replace(/complex portal_/, '').replace(/intact_/, '');
                        } else {
                            tc3.textContent = legendEntry.name;
                        }
                    }
                }
                div.appendChild(colorTable);
            }

            function exportSVG() {
                cv.downloadSVG(svgName + ".svg");
            }

            function loadData() {
                document.getElementById("networkGroup").style.visibility = "hidden";
                console.log("Loading data for : ", ac);
                const element = document.getElementById("messageContainer");
                $(element).append("Complex / Interaction Graph should show here in a few moments.");

                // wait for the data to be loaded prior, handy for larger network.
                jQuery.ajax({
                    url: exportUrl,
                    success: function(json) {
                        $(element).empty();
                        cv.clear();
                        cv.readMIJSON(json);
                        cv.autoLayout();
                        setAnnotations({value: "MI Features", checked: true});
                        setAnnotations({value: "Interactor", checked: true});
                        document.getElementById("networkGroup").style.visibility = "visible";
                        console.log("Data loaded for : ", ac);
                    },
                    error: function() {
                        console.log("Error loading for : ", ac);
                        const element = document.getElementById("messageContainer");
                        $(element).empty();
                        $(element).append("An error occurred while loading the data.");
                    }});
            }

            //]]>
        </script>
    </h:panelGroup>


</ui:composition>
